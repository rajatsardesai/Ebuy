{"version":3,"file":"static/js/618.3254d23c.chunk.js","mappings":"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","sources":["components/User/EditProfile.jsx","components/User/EditProfilePassword.jsx","components/User/Profile.jsx","yupSchema/index.js"],"sourcesContent":["import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nconst EditProfile = (props) => {\n    const { label, name, isEditing, value, handleEditClick, errors, touched, handleBlur, handleChange, handleSubmit }\n        = props;\n\n    return (\n        <>\n            {!isEditing ?\n                <>\n                    <div className=\"ms-md-2 me-md-auto mx-2\">\n                        <div className=\"fw-bold\">{label}:</div>\n                        {value}\n                    </div>\n                    <Button variant=\"secondary\" onClick={() => handleEditClick(true, value)}>Edit</Button>\n                </>\n                :\n                <>\n                    <div className=\"ms-md-2 me-md-auto mx-2\">\n                        <Form.Control\n                            type=\"text\"\n                            value={value}\n                            name={name}\n                            onChange={handleChange} onBlur={handleBlur} isInvalid={touched && errors}\n                            aria-label={label}\n                            aria-describedby={label}\n                        />\n                        {\n                            errors && touched ?\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {errors}\n                                </Form.Control.Feedback>\n                                : null\n                        }\n                    </div>\n                    <Button variant=\"secondary\" type=\"submit\" onClick={() => {\n                        handleEditClick(false, value)\n                        handleSubmit();\n                    }}>\n                        Save\n                    </Button>\n                </>\n            }\n        </>\n    )\n}\n\nexport default EditProfile;\n","import React, { useState, memo } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { updatePassword } from '../../store/actions/userAction';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from \"formik\";\nimport { profilePasswordSchema } from '../../yupSchema';\n\nconst initialValues = {\n    oldPassword: \"\",\n    newPassword: \"\",\n    confirmNewPassword: \"\"\n};\n\nconst EditProfilePassword = () => {\n    const dispatch = useDispatch();\n\n    //  States to update password\n    const [isEditing, setIsEditing] = useState(false);\n\n    //handle click to edit or save the passwords form\n    const handlePasswordClick = (value) => {\n        setTimeout(() => {\n            setIsEditing(value);\n        });\n    }\n\n    // Form handling and validation -- Formik and Yup\n    const { values, errors, touched, handleBlur, handleChange, handleSubmit } = useFormik({\n        initialValues,\n        validationSchema: profilePasswordSchema,\n        onSubmit: values => {\n            const updateFormPassword = new FormData();\n\n            updateFormPassword.set(\"oldPassword\", values.oldPassword);\n            updateFormPassword.set(\"newPassword\", values.newPassword);\n            updateFormPassword.set(\"confirmPassword\", values.confirmNewPassword);\n\n            dispatch(updatePassword(updateFormPassword));\n        }\n    });\n\n    return (\n        <>\n            {\n                !isEditing ?\n                    <>\n                        <div className=\"ms-md-2 me-md-auto mx-2\">\n                            <div className=\"fw-bold\">Password:</div>\n                            ********\n                        </div>\n                        <Button variant=\"secondary\" onClick={() => handlePasswordClick(true)}>Change Password</Button>\n                    </> :\n                    <>\n                        <Form onSubmit={handleSubmit} className=\"w-100\">\n                            <Form.Group className=\"mb-3\">\n                                <div className=\"ms-md-2 me-md-auto mx-2 mb-3\">\n                                    <Form.Control\n                                        type=\"password\"\n                                        value={values.oldPassword}\n                                        name=\"oldPassword\"\n                                        placeholder=\"Enter your old Password\"\n                                        onChange={handleChange} onBlur={handleBlur} isInvalid={touched.oldPassword && errors.oldPassword}\n                                        aria-label=\"oldPassword\"\n                                        aria-describedby=\"oldPassword\"\n                                    />\n                                    {\n                                        errors.oldPassword && touched.oldPassword ?\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {errors.oldPassword}\n                                            </Form.Control.Feedback>\n                                            : null\n                                    }\n                                    <Form.Control\n                                        type=\"password\"\n                                        value={values.newPassword}\n                                        name=\"newPassword\"\n                                        placeholder=\"Enter your new Password\"\n                                        className=\"my-3\"\n                                        onChange={handleChange} onBlur={handleBlur} isInvalid={touched.newPassword && errors.newPassword}\n                                        aria-label=\"newPassword\"\n                                        aria-describedby=\"newPassword\"\n                                    />\n                                    {\n                                        errors.newPassword && touched.newPassword ?\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {errors.newPassword}\n                                            </Form.Control.Feedback>\n                                            : null\n                                    }\n                                    <Form.Control\n                                        type=\"password\"\n                                        value={values.confirmNewPassword}\n                                        name=\"confirmNewPassword\"\n                                        placeholder=\"Enter your confirm Password\"\n                                        onChange={handleChange} onBlur={handleBlur} isInvalid={touched.confirmNewPassword && errors.confirmNewPassword}\n                                        aria-label=\"confirmPassword\"\n                                        aria-describedby=\"confirmPassword\"\n                                    />\n                                    {\n                                        errors.confirmNewPassword && touched.confirmNewPassword ?\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {errors.confirmNewPassword}\n                                            </Form.Control.Feedback>\n                                            : null\n                                    }\n                                </div>\n                                <Button variant=\"secondary\" type=\"submit\" onClick={() => handlePasswordClick(false)}>\n                                    Save\n                                </Button>\n                            </Form.Group>\n                        </Form>\n                    </>\n            }\n        </>\n    )\n}\n\nexport default memo(EditProfilePassword);\n","import React, { useEffect, useState } from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Container from 'react-bootstrap/esm/Container';\nimport EditProfile from './EditProfile';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { updateProfile } from '../../store/actions/userAction';\nimport { UPDATE_PROFILE_RESET } from '../../store/constants/userConstants';\nimport { useFormik } from \"formik\";\nimport { profileSchema } from '../../yupSchema';\nimport ProfilePassword from './EditProfilePassword';\n\nconst initialValues = {\n    name: \"\",\n    email: \"\"\n};\n\nconst Profile = () => {\n\n    const navigate = useNavigate();\n\n    const dispatch = useDispatch();\n\n    const { user, isAuthenticated } = useSelector((state) => state.user);\n\n    // Form handling and validation -- Formik and Yup\n    const { values, setFieldValue, errors, touched, handleBlur, handleChange, handleSubmit } = useFormik({\n        initialValues,\n        validationSchema: profileSchema,\n        onSubmit: values => {\n            const updateForm = new FormData();\n\n            updateForm.set(\"name\", values.name);\n            updateForm.set(\"email\", values.email);\n\n            dispatch(updateProfile(updateForm));\n        }\n    });\n\n    // States to update name and email\n    const [isEditingName, setIsEditingName] = useState(false);\n    const [isEditingEmail, setIsEditingEmail] = useState(false);\n\n    //handle click to edit or save the name and email in form\n    const handleEditClick = (value, updateValue) => {\n        updateValue === values.name ?\n            setIsEditingName(value) :\n            setIsEditingEmail(value)\n    }\n\n    useEffect(() => {\n        if (user) {\n            setFieldValue('name', user.name);\n            setFieldValue('email', user.email);\n        }\n        dispatch({\n            type: UPDATE_PROFILE_RESET\n        });\n    }, [isAuthenticated, navigate, user, dispatch, setFieldValue]);\n\n    return (\n        <>\n            <Container className=\"profile-container\">\n                <h3 className=\"my-4\">Your account</h3>\n                <ListGroup as=\"ol\">\n                    <ListGroup.Item\n                        as=\"li\"\n                        className=\"d-flex justify-content-between align-items-start\"\n                    >\n                        <EditProfile label=\"Name\" name=\"name\" isEditing={isEditingName} value={values.name} handleEditClick={handleEditClick} errors={errors.name} touched={touched.name} handleBlur={handleBlur} handleChange={handleChange} handleSubmit={handleSubmit} />\n                    </ListGroup.Item>\n                    <ListGroup.Item\n                        as=\"li\"\n                        className=\"d-flex justify-content-between align-items-start\"\n                    >\n                        <EditProfile label=\"Email\" name=\"email\" isEditing={isEditingEmail} value={values.email} handleEditClick={handleEditClick} errors={errors.email} touched={touched.email} handleBlur={handleBlur} handleChange={handleChange} handleSubmit={handleSubmit} />\n                    </ListGroup.Item>\n                    <ListGroup.Item\n                        as=\"li\"\n                        className=\"d-flex justify-content-between align-items-start\"\n                    >\n                        <div className=\"ms-2 me-auto\">\n                            <div className=\"fw-bold\">Joined on:</div>\n                            {String(user.createdAt).substr(0, 10)}\n                        </div>\n                    </ListGroup.Item>\n                    <ListGroup.Item\n                        as=\"li\"\n                        className=\"d-flex justify-content-between align-items-start\"\n                    >\n                        <ProfilePassword />\n                    </ListGroup.Item>\n\n                </ListGroup>\n            </Container >\n        </>\n    )\n}\n\nexport default Profile;\n","import * as Yup from \"yup\";\n\n// User schemas\nexport const loginSchema = Yup.object({\n    email: Yup.string().email(\"Invalid Email\").required(\"Please enter your email\"),\n    password: Yup.string().min(6, \"Password must be at least 6 characters\").required(\"Please enter your password\")\n});\n\nexport const forgotPassSchema = Yup.object({\n    email: Yup.string().email(\"Invalid Email\").required(\"Please enter your email\")\n});\n\nexport const resetPassSchema = Yup.object({\n    password: Yup.string().min(6, 'Password must be at least 6 characters').required(\"Please enter your new password\"),\n    confirmPassword: Yup.string().min(6, 'Password must be at least 6 characters').oneOf([Yup.ref('password'), null], 'Password does not match').required(\"Please confirm your new password\"),\n});\n\nexport const signupSchema = Yup.object({\n    name: Yup.string().min(2, \"Name must be at least 2 characters\").max(25, \"Name should not be more than 25 characters\").required(\"Please enter your name\"),\n    email: Yup.string().email(\"Invalid Email\").required(\"Please enter your email\"),\n    password: Yup.string().min(6, 'Password must be at least 6 characters').required(\"Please enter your password\"),\n    avatar: Yup.mixed().required(\"Please enter your image\")\n});\n\nexport const profileSchema = Yup.object({\n    name: Yup.string().min(2, \"Name must be at least 2 characters\").max(25, \"Name should not be more than 25 characters\").required(\"Please enter your name\"),\n    email: Yup.string().email(\"Invalid Email\").required(\"Please enter your email\"),\n});\n\nexport const profilePasswordSchema = Yup.object({\n    oldPassword: Yup.string().min(6, 'Old password must be at least 6 characters').required(\"Please enter your old password\"),\n    newPassword: Yup.string().min(6, 'New password must be at least 6 characters').required(\"Please enter your new password\"),\n    confirmNewPassword: Yup.string().min(6, 'New password must be at least 6 characters').oneOf([Yup.ref('newPassword'), null], 'Password does not match').required(\"Please confirm your new password\"),\n});\n\n// Cart schemas\nexport const shippingSchema = Yup.object({\n    address: Yup.string().min(6, 'Address must be at least 6 characters').required(\"Please enter your address\"),\n    city: Yup.string().min(3, 'City must be at least 3 characters').required(\"Please enter your city\"),\n    state: Yup.string().required(\"Please select your state\"),\n    landmark: Yup.string().min(3, 'Landmark must be at least 3 characters'),\n    pinCode: Yup.number().typeError(\"Pin code must be a number\").min(3, 'Pin code must be at least 3 characters').required(\"Please enter your pin code\"),\n    phoneNo: Yup.number().typeError(\"Phone number must be a number\").required(\"Please enter your phone number\"),\n});\n\n// Admin schemas\nexport const productSchema = Yup.object({\n    name: Yup.string().min(3, \"Name must be at least 3 characters\").required(\"Please enter product name\"),\n    price: Yup.number().typeError(\"Price must be a number\").required(\"Please enter product price\"),\n    description: Yup.string().min(25, \"Description must be at least 25 characters\").max(2000, \"Description should not be more than 2000 characters\").required(\"Please enter product description\"),\n    category: Yup.string().required(\"Please select product category\"),\n    stock: Yup.number().typeError(\"Stock must be a number\").required(\"Please enter product stock\"),\n    images: Yup.mixed().required(\"Please choose product image\"),\n    imagesPreview: Yup.mixed(),\n});\n\nexport const updateUserSchema = Yup.object({\n    name: Yup.string().min(2, \"Name must be at least 2 characters\").max(25, \"Name should not be more than 25 characters\").required(\"Please enter name\"),\n    email: Yup.string().email(\"Invalid Email\").required(\"Please enter email\"),\n    role: Yup.string().required(\"Please select role\"),\n});"],"names":["props","label","name","isEditing","value","handleEditClick","errors","touched","handleBlur","handleChange","handleSubmit","_jsx","_Fragment","children","_jsxs","className","Form","type","onChange","onBlur","isInvalid","Button","variant","onClick","initialValues","oldPassword","newPassword","confirmNewPassword","EditProfilePassword","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","setIsEditing","handlePasswordClick","setTimeout","_useFormik","useFormik","validationSchema","profilePasswordSchema","onSubmit","values","updateFormPassword","FormData","set","updatePassword","placeholder","memo","email","navigate","useNavigate","_useSelector","useSelector","state","user","isAuthenticated","profileSchema","updateForm","updateProfile","setFieldValue","isEditingName","setIsEditingName","_useState3","_useState4","isEditingEmail","setIsEditingEmail","updateValue","useEffect","UPDATE_PROFILE_RESET","Container","ListGroup","as","EditProfile","String","createdAt","substr","ProfilePassword","loginSchema","Yup","required","password","min","forgotPassSchema","resetPassSchema","confirmPassword","oneOf","signupSchema","max","avatar","shippingSchema","address","city","landmark","pinCode","typeError","phoneNo","productSchema","price","description","category","stock","images","imagesPreview","updateUserSchema","role"],"sourceRoot":""}